/*
 * This file is generated by jOOQ.
*/
package ru.highloadcup.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.highloadcup.generated.DefaultSchema;
import ru.highloadcup.generated.Keys;
import ru.highloadcup.generated.tables.records.VisitRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Visit extends TableImpl<VisitRecord> {

    private static final long serialVersionUID = -833370642;

    /**
     * The reference instance of <code>VISIT</code>
     */
    public static final Visit VISIT = new Visit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitRecord> getRecordType() {
        return VisitRecord.class;
    }

    /**
     * The column <code>VISIT.ID</code>.
     */
    public final TableField<VisitRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VISIT.LOCATION_ID</code>.
     */
    public final TableField<VisitRecord, Integer> LOCATION_ID = createField("LOCATION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VISIT.USER_ID</code>.
     */
    public final TableField<VisitRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VISIT.VISITED_AT</code>.
     */
    public final TableField<VisitRecord, Integer> VISITED_AT = createField("VISITED_AT", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VISIT.MARK</code>.
     */
    public final TableField<VisitRecord, Integer> MARK = createField("MARK", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>VISIT</code> table reference
     */
    public Visit() {
        this("VISIT", null);
    }

    /**
     * Create an aliased <code>VISIT</code> table reference
     */
    public Visit(String alias) {
        this(alias, VISIT);
    }

    private Visit(String alias, Table<VisitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Visit(String alias, Table<VisitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VisitRecord> getPrimaryKey() {
        return Keys.PK_VISIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VisitRecord>> getKeys() {
        return Arrays.<UniqueKey<VisitRecord>>asList(Keys.PK_VISIT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VisitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VisitRecord, ?>>asList(Keys.FK_VISIT_LOCATION_1, Keys.FK_VISIT_USER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Visit as(String alias) {
        return new Visit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Visit rename(String name) {
        return new Visit(name, null);
    }
}
